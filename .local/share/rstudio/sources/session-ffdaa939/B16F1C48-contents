---
output:
  html_document:
    title: 'MA5111 RNA-Seq'
    toc: true
    toc_float: true
    code_folding: hide
    highlight: zenburn
    theme: flatly
---r::opts_chunk$set(echo = TRUE)
```

```{R, message=F, warning=F}
library(dplyr)
library(biomaRt)
library(tximport)
library(rhdf5)
library(gplots)
library(org.Hs.eg.db)
library(DESeq2)
library(DT)
library(apeglm)
library(RColorBrewer)
library(IHW)
library(PCAtools)
library(pheatmap)
library(clusterProfiler)
library(EnhancedVolcano)
library(ComplexHeatmap)
library(circlize)
library(fgsea)
library(tidyverse)
library(ggpubr)
```

# Introduction
This R markdown document walks through an RNA-Seq differential expression analysis using `DESeq2` for MA5111. Quality control plots, differential expression results, plots and pathway analysis are covered in the document.

The tutorial assumes you have 9 Kallisto quantification directories and a samples.csv file under `/home/rnaseq_data/quant/` as well as a .gmt file that we will use for the gene set enrichment analysis.
```{R}
quant_dir <- "/home/rstudio/rnaseq_data/quant"
list.files(quant_dir)
```

# Reading Input Data

### Metadata
Read in the file `samples.csv` which contains the experimental metadata. Please make sure that the rownames of this dataframe match the kallisto quantification directory names at `/home/rnaseq/quant/`.

```{R}
samples <- read.csv(paste0(quant_dir, "/samples.csv"), header=T, row.names = "sample", stringsAsFactors = T)
samples
```

### Convert Numerics to Factors
When performing differential expression analysis using `DESeq2`, if a column in `samples.csv` is numeric and provided to the design formula, `DESeq2` will produce the following message:

> the design formula contains a numeric variable with integer values, specifying a model with increasing fold change for higher values. did you mean for this to be a factor? if so, first convert this variable to a factor using the factor() function

What does this mean? From Mike Love (`DESeq2` author):

> There is a constant fold change for every unit of change in replicates. So if the estimated fold change is 2, this implies that replicates 2 = 2x replicates 1, replicates 3 = 2x replicates 2, etc. Or in other words, the relationship is linear on the log counts scale.

This is not what we want! Be really careful with your metadata file as it defines our statistical model design.
To fix this, change the replicate column to a categorical factor using factor().

The code block below checks the input metadata file, tells the user if any columns are numeric and converts them to a factor.
```{R, message=F, warning=F}
samples$replicate <- factor(samples$replicate)

# check its ok:
factor_cols <- sapply(samples, is.factor)
factor_cols
```

### Stage Kallisto files
We need to create a file handle object (a named character list) containing the sample IDs and the paths to the kallisto quantification `.h5` files. If the rownames of your metadata object (`samples`) do not match the quantification directory names, you will get an error during the `TXI object` step.
```{R, message=F, warning=F}
files <- file.path(quant_dir, rownames(samples), "abundance.h5")
names(files) <- paste0(rownames(samples))
files
```

# Tximport
`tximport` imports transcript-level abundances from quantification tools (`kallisto` in our case) and converts them to gene counts for downstream analyses using a differential expression analysis package.

### BiomaRt
We will use `biomaRt` to connect to the `ENSEMBL` databases and map transcript IDs to gene IDs. Firstly, we will create the `mart` object specifying which database to use:
```{R, warning=F, message=F}
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
```

### Transcript to gene (tx2gene)
Recall we used the `ENSEMBL` reference cDNA file `Homo_sapiens.GRCh38.cdna.all.fa.gz` for `Kallisto quant` on LUGH. This means that our quantification files have `ENSEMBL` transcript ID's. We can map them to gene symbols running the code below:
```{R, message=F, warning=F}
tx2gene <- getBM(attributes = c("ensembl_transcript_id_version", "hgnc_symbol"), mart = mart, useCache = FALSE)
head(tx2gene)
```

### TXI object
Create a `txi` object summarising `kallisto` transcipt quantification to the gene-level.
```{R, message=F, warning=F}
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene)
head(txi$abundance)
```

# DESeq2
Now we are ready to create the `DDS` object for `DESeq2` analysis that contains metadata (colData), counts further information that can be obtained via `dds@`.

### Design
The model design is one of the most important steps for an RNA-Seq analysis. Here, we are going to specify the design `~ replicate + condition` (columns of the metadata file). The factor of interest goes last in the model terms, we want to compare control vs. lung vs. melanoma in the experiment. Replicate has been included as we want to control for the effect of sample replicates.

### DDS
We are going to create the `DDS` object using `DESeqDataSetFromTximport()` as we used `tximport` to convert transcript abundances to gene-level counts.
```{R, message=F, warning=F}
dds <- DESeqDataSetFromTximport(txi, colData = samples, design = ~ replicate + condition )
```

### Factor levels
By default, R will choose a reference level for factors based on alphabetical order. We will explicitly set control as the reference level so you can see how itâ€™s done using relevel().

N.B this step must be done prior to creating the dds object using DESeq()! If you want to change the reference level, you must re-run DESeq().

Check that relevel() worked correctly by running resultsNames(dds) - we want control to be the reference level so we can compare lung vs control and melanoma vs. control.
```{R, message=F, warning=F}
dds$condition <- relevel(dds$condition, ref = "control")
dds <- DESeq(dds)
resultsNames(dds)
```

# Quality Control
We will use the gene-level counts to perform some quality control checks on the samples in the experiment. We will choose a suitable transformation for the gene counts to reduce impact of lowly-expressed genes on our analysis.

### Extract Counts
Extract gene-level counts from the `DDS` object.
```{R, message=F, warning=F}
counts <- counts(dds, normalized=TRUE)
```

###Transform Counts
We'll look at two transformations: log2(), and rlog(). 
```{R, message=F, warning=F}
log2_counts <- assay(normTransform(dds))
rld_counts <- assay(rlog(dds))

library(vsn)
library(hexbin)

## x-axis is the transformed mean not the raw mean..

log2_plt <- meanSdPlot(log2_counts, ranks=FALSE, plot=FALSE)
log2_plt$gg + ggtitle("Log2 + PC Transformation") + xlim(0,20)

rld_plt <- meanSdPlot(rld_counts, ranks=FALSE, plot=FALSE)
rld_plt$gg + ggtitle("Rlog Transformation") + xlim(0,20)

```

### Save Counts
Write the counts files to text files in `~/RNA-Seq` (Note: Can skip this in the Docker container)
```{R, message=F, warning=F}
#dir.create("/home/rstudio/rnaseq_data/counts")
#write.table(counts, "/home/rstudio/rnaseq_data/normalised_counts.txt", sep="\t", quote = F)
#write.table(log2_counts, "/home/rstudio/rnaseq_data/log2_counts.txt", sep="\t", quote = F)
```

### Sample Heatmap
A heatmap of sample distances matrix (`dist(t(log2))`) gives us an overview over similarities and dissimilarities between samples.
```{R, message=F, warning=F}
## Calculate distance between samples
sampleDists <- dist(t(rld_counts))

## Place distances in matrix
sampleDistMatrix <- as.matrix(sampleDists)

## Optional, remove colnames
colnames(sampleDistMatrix) <- NULL

## create annotation dataframe
ann <- data.frame(Condition = samples$condition)

col <- c("blue", "forestgreen", "red1")
names(col) <- c("melanoma", "lung", "control")
ann_col <- list(Condition = col)

## match annotation rownames to distance mat
rownames(ann) <- rownames(sampleDistMatrix)

pheatmap(mat=sampleDistMatrix,
         ## pass distance metric calculated to heatmap
         clustering_distance_rows=sampleDists,
         clustering_distance_cols=sampleDists,
         ## pass annotation dataframe 
         annotation_col = ann,
         ## add colors
         annotation_colors = ann_col,
         ## heatmap colours
         col=hcl.colors(100,"GnBu",rev=T))
```

### PCA
PCA plots the variance explained by samples in each principal component. Typically PC1 & PC2 explain the most variation in the dataset, you should look at these first and foremost.

In the plot below we can see that samples from the lung and control groups cluster tightly together and that the  melanoma samples overlap with the control samples in PC1/PC2. Make the effort to explore other principal components yourdelf - for example, in PC2 vs PC4 there is excellent separation between the melanoma and control samples.

PCA can give you a good idea of how succesful the Differential Expression analysis will be - samples that are very close together in PC feature space will not produce as many DE genes as those that are separated by a large distance.
```{R, message=F,warning=F}
p <- pca(rld_counts, metadata = samples)

biplot(p,
       colby = 'condition',
       colkey = c('melanoma'='royalblue', 'control'='red1', 'lung'='forestgreen'),
       hline = 0,
       vline = 0,
       legendPosition = 'right',
       legendLabSize = 12,
       legendIconSize = 8.0,
       title = 'PCA bi-plot',
       subtitle = 'PC1 versus PC2')
```       

# Differential Expression Analysis

### DESeq results()
We can extract differentially expressed genes between phenotypes of interest by using `results()` on the `DDS` object. We will apply the `apeglm` shrinkage estimator on our results. apeglm shrinks low confidence (high inter-sample variation) differentially expressed genes towards 0, producing a robust set of differentially expressed genes.

The argument `coef` in `lfcShrink` refers to the contrast of interest returned by `resultsNames(dds)`. For lung vs. control, it is the 4th character string returned thus `coef=4` for lung vs. control.

Set up lung vs control, melanoma vs control:
```{R, message=F, warning=F}
# make lung vs control object
lung_v_ctrl <- results(dds, filterFun=ihw, alpha=0.05, c("condition", "lung", "control"))
res1 <- lfcShrink(dds=dds, res=lung_v_ctrl, coef=4, type="apeglm")
summary(res1)

# make melanoma vs control object
melanoma_v_ctrl <- results(dds, filterFun=ihw, alpha=0.05, c("condition", "melanoma", "control"))
res2 <- lfcShrink(dds=dds, res=melanoma_v_ctrl, coef=5, type="apeglm")
summary(res2)
```

Set up lung vs melanoma. We need to reconfigure the `DDS` object so 'melanoma' is the reference level in 'condition', and re-run `DESeq()`.

Check `resultsNames(dds)` to ensure the correct contrasts are set:
```{R, message=F, warning=F}
# to make lung vs melanoma, relevel the dds object reference level and redo the DESeq call
dds$condition <- relevel(dds$condition, ref = "melanoma")
dds <- DESeq(dds)

# double check it worked
resultsNames(dds)
```

Now extract the contrast results and perform `apeglm`.
```{R, message=F, warning=F}
# make lung vs melanoma
lung_v_melanoma <- results(dds, filterFun=ihw, alpha=0.05, c("condition", "lung", "melanoma"))
res3 <- lfcShrink(dds=dds, res=lung_v_melanoma, coef=5, type="apeglm")
summary(res3)
```

### Resusable Functions
Below are some handy functions for extracting differentially expressed genes and performing annotation of DE genes.

##### Extract Up Regulated Genes
```{R}
get_upregulated <- function(df){
	key <- intersect(rownames(df)[which(df$log2FoldChange>=1)], rownames(df)[which(df$pvalue<=0.05)])
  results <- as.data.frame((df)[which(rownames(df) %in% key),])
	return(results)
}
```

##### Extract Down Regulated genes
```{R}
get_downregulated <- function(df){
  	key <- intersect(rownames(df)[which(df$log2FoldChange<=-1)], rownames(df)[which(df$pvalue<=0.05)])
  	results <- as.data.frame((df)[which(rownames(df) %in% key),])
  	return(results)
}
```

##### Annotate DE genes
```{R}
annotate_de_genes <- function(df){

    df$hgnc_symbol <- rownames(df)
    mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
    info <- getBM(attributes=c("hgnc_symbol",
                               "ensembl_gene_id_version",
                               "chromosome_name",
                               "start_position",
                               "end_position",
                               "strand",
                               "entrezgene_description"),
                  filters = c("hgnc_symbol"),
                  values = df$hgnc_symbol,
                  mart = mart,
                  useCache=FALSE)

    tmp <- merge(df, info, by="hgnc_symbol")
    tmp$strand <- gsub("-1", "-", tmp$strand)
    tmp$strand <- gsub("1", "+", tmp$strand)
    tmp$hgnc_symbol <- make.names(tmp$hgnc_symbol, unique = T)
    tmp <- tmp[!grepl("CHR", tmp$chromosome_name),]

    output_col <- c("Gene", "Ensembl ID", "Chromosome", "Start", "Stop", "Strand", "Description", "Log2FC", "P-value", "Adj P-value")
    tmp <- subset(tmp, select=c(hgnc_symbol, ensembl_gene_id_version, chromosome_name, start_position, end_position, strand, entrezgene_description, log2FoldChange, pvalue, padj))
    colnames(tmp) <- output_col

    if(min(tmp$Log2FC) > 0){
        tmp <- tmp[order(-tmp$Log2FC),]
    }else{
        tmp <- tmp[order(tmp$Log2FC),]
    }

    return(tmp)

}
```

### Write DE results
Use the above functions to extract up/down regulated genes and annotate them using biomaRt, and write to a file. Please note that the get_(up/down)regulated function requires a dataframe as input.

> Note: we will focus on lung vs control for the remainder of the practical

```{R, message=F, warning=F}
de_up <- get_upregulated(as.data.frame(res1))
de_down <- get_downregulated(as.data.frame(res1))
upregulated_genes <- annotate_de_genes(de_up)
downregulated_genes <- annotate_de_genes(de_down)

#confirm these worked
head(upregulated_genes)

#dir.create("/home/rstudio/rnaseq_data/DESeq_results/")
#write.table(upregulated_genes, "/home/rstudio/rnaseq_data/DESeq_results/lung_vs_control_upregulated.txt", sep="\t", row.names=F, quote=F)
#write.table(downregulated_genes, "/home/rstudio/rnaseq_data/lung_vs_control_downregulated.txt", sep="\t", row.names=F, quote=F)
```

# Results Plots

### Volcano Plot
Volcano plots are useful to show how many genes are differentially expressed in the experimental contrast of interest. Labels are optional, I have included them so you know how to use them.

> N.B Volcano plots use -log10 on the Y-axis.

```{R, message=F, warning=F}
## remove NA values from results
res1 <- na.omit(res1)

## calculate min/max axis values for plot (optional)
min_width <- min(res1$log2FoldChange)
max_width <- max(res1$log2FoldChange)
max_height <- -log10(min(res1[res1$pvalue>0, 5]))

## Grab top 10 up-reg genes for plot
up <- subset(res1, res1$log2FoldChange > 1 & res1$pvalue <= 0.05)
up <- up[order(-up$log2FoldChange),]
up_list <- head(rownames(up), n=10L)

## Grab top 10 down-reg genes for plot
down <- subset(res1, res1$log2FoldChange < -1 & res1$pvalue <= 0.05)
down <- down[order(down$log2FoldChange),]
down_list <- head(rownames(down), n=10L)

## place top 20 DE genes in vector (optinal...)
plot_top_20 <- c(up_list, down_list)

EnhancedVolcano(res1,
                lab=rownames(res1),
                x="log2FoldChange",
                y="pvalue",
                selectLab=plot_top_20,
                drawConnectors=TRUE,
                legendPosition = "none",
                FCcutoff=1.0,
                pCutoff=0.05,
                title="Volcano Plot",
                subtitle="Lung vs. Control",
                caption = paste0('Total Genes = ', nrow(res1)),
                xlim=c(min_width, max_width),
                ylim=c(0, max_height))
```

### Bonus: apeglm visualised
Make a volcano plot of `lung_v_ctrl`, the `DESeq2` results object that has not been filtered by `apeglm`.

You can see that there are genes with very large log2 FC values. As a rule of thumb, be skeptical of genes that have LFC values over +/- 10.
```{R, message=F, warning=F}
res1 <- na.omit(lung_v_ctrl)

min_width <- min(res1$log2FoldChange)
max_width <- max(res1$log2FoldChange)
max_height <- -log10(min(res1[res1$pvalue>0, 5]))

up <- subset(res1, res1$log2FoldChange > 1 & res1$pvalue <= 0.05)
up <- up[order(-up$log2FoldChange),]
up_list <- head(rownames(up), n=10L)

down <- subset(res1, res1$log2FoldChange < -1 & res1$pvalue <= 0.05)
down <- down[order(down$log2FoldChange),]
down_list <- head(rownames(down), n=10L)

plot_top_20 <- c(up_list, down_list)
EnhancedVolcano(res1,
			          lab=rownames(res1),
          			x="log2FoldChange",
          			y="pvalue",
          			selectLab=plot_top_20,
          			drawConnectors=TRUE,
          			FCcutoff=1.0,
          			pCutoff=0.05,
          			title="Volcano Plot",
          			subtitle="Lung vs. Control",
          			legendLabSize=8,
          			caption = paste0('Total Genes = ', nrow(res1)))

##reset res1 for heatmaps
res1 <- na.omit(res1)
```

### Heatmap
Heatmaps are another way to show the differentially expressed genes in the experimental contrast of interest. 
```{R, message=F, warning=F}
# subset the counts matrix to get the lung and control samples
subset <- rld_counts[, 1:6]

# now select de_up, de_down, i.e DE genes that passed the filtering our function produced
up <- rownames(de_up)
down <- rownames(de_down)

# subset matrix to include only DE genes
key <- c(up, down)
subset <- subset[which(rownames(subset) %in% key),]

# scale and center the values
mat <- as.matrix(scale(t(subset), center = T))

# basic plot to check we're plotting something sensible
#pheatmap(t(mat))

# spruce it up a bit..
ann <- data.frame(Condition = c(rep("Control", 3), rep("Lung", 3)))
rownames(ann) <- rownames(mat)
col <- c("blue", "forestgreen")
names(col) <- c("Control", "Lung")
ann_col <- list(Condition = col)

pheatmap(t(mat), 
         show_rownames = FALSE,
         annotation_col = ann,
         annotation_colors = ann_col,
         color = hcl.colors(100, "PRGn",rev=F))
```

# Pathway Analysis

## fgsea
We will use the GO Biological processes GMT file c5.bp.v7.0.symbols.gmt which should be in the quant directory.

### Create ranked gene list
Extract the gene names and associated log2FoldChanges from our lung vs control study to generate a ranked gene list.
```{r, message=F, warning=F}
## convert result object to dataframe
res <- as.data.frame(res1) # lung vs control
res$hgnc_symbol <- rownames(res)

# compute summary stat
fgsea_rank <- res %>%
              dplyr::select(hgnc_symbol, log2FoldChange) %>%
              na.omit() %>%
              distinct() %>%
              group_by(hgnc_symbol) %>%
              summarize(stat=mean(log2FoldChange))

fgsea_rank
```

### Convert to a named list
```{R,message=F, warning=F}
# create named list
rank <- deframe(fgsea_rank)
head(rank, 20)
```

### Read GMT file
```{R, message=F, warning=F}
# read in gmt file
pathway <- gmtPathways("/home/rstudio/rnaseq_data/quant/c5.bp.v7.0.symbols.gmt")
head(pathway, 1)
```

### Run fgsea
```{R, message=F, warning=F}
# run fgsea
fgsea <- fgsea(pathways=pathway, stats=rank, nperm=1000)

fgseaResTidy <- fgsea %>%
  as_tibble() %>%
  arrange(desc(NES))

# Show in a nice table:
fgseaResTidy %>%
  dplyr::select(-leadingEdge, -ES, -nMoreExtreme) %>%
  arrange(padj) %>%
  DT::datatable()
```
### Enrichment plots
Here, you can see examples of pathways enriched in our lung samples, and pathways enriched in Control (i.e negative NES score)
```{R, message=F, warning=F}
filtered_pathway <- subset(fgsea, NES > 2.0)
filtered_pathway

filt_up <- as.vector(filtered_pathway$pathway)

for (i in filt_up){
    plt <- plotEnrichment(pathway = pathway[[i]],
    gseaParam = 1, ticksSize = 0.5, stats= rank) +
    labs(title=i) + theme(plot.title = element_text(hjust = 0.5, face="bold"))
    print(plt)
}

filtered_pathway <- subset(fgsea, NES < -2.6)
filtered_pathway

filt_down <- as.vector(filtered_pathway$pathway)

for (i in filt_down){
    plt <- plotEnrichment(pathway = pathway[[i]],
    gseaParam = 1, ticksSize = 0.5, stats= rank) +
    labs(title=i) + theme(plot.title = element_text(hjust = 0.5, face="bold"))
    print(plt)
}
```